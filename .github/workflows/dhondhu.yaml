name: Terraform Infrastructure Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'environments/**'
      - 'modules/**'
      - '.github/workflows/**'

env:
  TF_VERSION: '1.6.0'

jobs:
  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ./environments/dev

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/dev

      - name: Terraform Validate
        run: terraform validate
        working-directory: ./environments/dev

      - name: Terraform Security Scan
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: ./environments/dev
          soft_fail: true

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/dev

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./environments/dev
        env:
          TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan
          path: ./environments/dev/tfplan

  terraform-apply-dev:
    name: Terraform Apply - Dev
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/dev

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./environments/dev
        env:
          TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./environments/dev
        env:
          TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}

      - name: Terraform Output
        run: terraform output -json
        working-directory: ./environments/dev

  terraform-apply-prod:
    name: Terraform Apply - Production
    runs-on: ubuntu-latest
    needs: terraform-validate
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure Azure credentials
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./environments/prod

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./environments/prod
        env:
          TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./environments/prod
        env:
          TF_VAR_sql_admin_password: ${{ secrets.SQL_ADMIN_PASSWORD }}

      - name: Terraform Output
        run: terraform output -json
        working-directory: ./environments/prod

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [terraform-apply-dev, terraform-apply-prod]
    if: always() && (needs.terraform-apply-dev.result == 'success' || needs.terraform-apply-prod.result == 'success')
    steps:
      - name: Success Notification
        run: |
          echo "✅ Terraform deployment completed successfully!"
          echo "Environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'dev' }}"

  notify-failure:
    name: Notify Failure
    runs-on: ubuntu-latest
    needs: [terraform-apply-dev, terraform-apply-prod]
    if: always() && (needs.terraform-apply-dev.result == 'failure' || needs.terraform-apply-prod.result == 'failure')
    steps:
      - name: Failure Notification
        run: |
          echo "❌ Terraform deployment failed!"
          echo "Please check the logs for more details."
