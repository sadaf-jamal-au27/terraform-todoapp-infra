name: "Infrastructure Deployment Pipeline"

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy      

permissions:
  id-token: write
  contents: read
  
jobs: 
  infrastructure-plan:
    steps: 
      - name: Checkout
        uses: actions/checkout@v5.0.0
    
      - name: Azure Login
        uses: Azure/login@v2.3.0
            
      - name: Code Formatting Check
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
        working-directory: environments/dev
        
      - name: Initialize Terraform
        id: init
        run: terraform init -input=false  
        working-directory: environments/dev

      - name: Validate Configuration
        id: validate
        run: terraform validate -no-color
        working-directory: environments/dev        
      
      - name: Plan Infrastructure Changes
        id: plan
        run: |
          terraform plan -no-color -input=false -out=tfplan
          echo "plan_exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true
        working-directory: environments/dev
        
      - name: Comment Plan on PR
        if: github.event_name == 'pull_request' && steps.plan.outputs.plan_exit_code == 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('environments/dev/tfplan', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan Results\n\`\`\`\n${plan}\n\`\`\``
            });    
        
  infrastructure-deploy:
    if: github.ref == 'refs/heads/main'
    needs: infrastructure-plan
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
    
      - name: Azure Login
        uses: Azure/login@v2.3.0   
          
      - name: Initialize Terraform
        id: init
        run: terraform init -input=false  
        working-directory: environments/dev

      - name: Deploy Infrastructure
        id: apply
        run: |
          terraform apply --auto-approve
          echo "apply_exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true
        working-directory: environments/dev
        
      - name: Output Infrastructure Details
        if: steps.apply.outputs.apply_exit_code == 0
        run: |
          echo "## 🚀 Infrastructure Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "### Deployed Resources:" >> $GITHUB_STEP_SUMMARY
          echo "- Resource Groups: rg-dev-todoapp, rg-dev-todoapp-1" >> $GITHUB_STEP_SUMMARY
          echo "- Container Registry: acrdevtodoapp[random-suffix]" >> $GITHUB_STEP_SUMMARY
          echo "- Kubernetes Cluster: aks-dev-todoapp" >> $GITHUB_STEP_SUMMARY
          echo "- SQL Server: sql-dev-todoapp-[random-suffix]" >> $GITHUB_STEP_SUMMARY
          echo "- SQL Database: sqldb-dev-todoapp" >> $GITHUB_STEP_SUMMARY
          echo "- Public IP: pip-dev-todoapp" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Configure AKS cluster access" >> $GITHUB_STEP_SUMMARY
          echo "2. Deploy your TodoApp application" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure SQL database connections" >> $GITHUB_STEP_SUMMARY
        working-directory: environments/dev
        
  infrastructure-destroy:
    if: github.event.inputs.action == 'destroy' || (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch')
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
    
      - name: Azure Login
        uses: Azure/login@v2.3.0
          
      - name: Initialize Terraform
        id: init
        run: terraform init -input=false  
        working-directory: environments/dev

      - name: Destroy Infrastructure
        id: destroy
        run: |
          terraform destroy --auto-approve
          echo "destroy_exit_code=$?" >> $GITHUB_OUTPUT
        continue-on-error: true
        working-directory: environments/dev
        
      - name: Output Destroy Results
        if: steps.destroy.outputs.destroy_exit_code == 0
        run: |
          echo "## 🗑️ Infrastructure Destroyed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "All TodoApp infrastructure resources have been removed from Azure." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Destroyed Resources:" >> $GITHUB_STEP_SUMMARY
          echo "- Resource Groups and all contained resources" >> $GITHUB_STEP_SUMMARY
          echo "- Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "- Kubernetes Cluster" >> $GITHUB_STEP_SUMMARY
          echo "- SQL Server and Database" >> $GITHUB_STEP_SUMMARY
          echo "- Public IP addresses" >> $GITHUB_STEP_SUMMARY
        working-directory: environments/dev
